package com.nad.ds;

import java.util.Hashtable;

public class LinkedListDemo {

	private Node head = null;

	public LinkedListDemo(Node head) {
		super();
		this.head = head;
	}

	public  int findNthElementFromLastUsingPointers(int nthNode) {
		Node tempHead=this.head,tempNthNode=null;
		
		
		return 0;
	}

	public  boolean isCircular() {
		Node temp=this.head;
		int counter=1;
		boolean isCirular=false;
		Hashtable<Integer, Integer> listHash= new Hashtable<>();
		do {
			if(listHash.contains(temp.getData().hashCode())){
				isCirular=true;
			}
			listHash.put((Integer) temp.getData().hashCode(), counter++);
			temp=temp.getNextNode();
		}while(!isCirular || temp.getNextNode()!=null);
		return isCirular;
	}
	public boolean isCircularUsingFloyed() {
		Node slowPtr=head;
		Node fastPtr=head;
		
		while(fastPtr !=null && fastPtr.getNextNode() !=null) {
			fastPtr=fastPtr.getNextNode().getNextNode();
			slowPtr=slowPtr.getNextNode();
			if(fastPtr.getData() ==slowPtr.getData()) {
				return true;
			}
		}
		
		  return false;
		
	}
	public static void main(String[] args) {
		Node n1 = new Node(10);
		Node n2 = new Node(20);
		Node n3 = new Node(30);
		Node n4 = new Node(40);
		Node n5 = new Node(50);
		Node n6 = new Node(60);
		Node n7 = new Node(70);
		Node n8 = new Node(80);
		Node n9 = new Node(90);
		Node n10 = new Node(100);
		Node n11 = new Node(110);
		

		LinkedListDemo head = new LinkedListDemo(n1);
		n1.setNextNode(n2);
		n2.setNextNode(n3);
		n3.setNextNode(n4);
		n4.setNextNode(n5);
		n5.setNextNode(n6);
		n6.setNextNode(n7);
		n7.setNextNode(n8);
		n8.setNextNode(n9);
		n9.setNextNode(n10);
		n10.setNextNode(n11);
		n11.setNextNode(null);
		
		
		System.out.println(head.findNthElementFromLastUsingPointers(2));
		System.out.println(head.isCircularUsingFloyed());
	}
}
