package com.nad.ds;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.Stack;

public class StringDemo {

	public static void main(String[] args) {
		System.out.println(convertString("Nadeem"));
		System.out.println(repetingLetters("aaabbcccnnddd"));
		String[] res=findMatchingWords(new String[] {"otse","tse","eo","stoe"}, new char[] {'e','o','t','s'});
	}
	
	public static String convertString(String s) {
	
		char ch[] =s.toCharArray();
		StringBuffer sb=new StringBuffer();
		for(char c : ch) {
			int temp=(int)c+1;
			sb.append((char)temp);
		}
		return sb.toString();
	}
	
	//aaabbccc
	//a3b2c3
	//a3b2c3d3n2

	public static String repetingLetters(String str) {
		char[] chars=str.toCharArray();
		HashMap<Character, Integer> countChars=new HashMap<>();
		for(Character c : chars) {
			if(countChars.containsKey(c)) {
				countChars.computeIfPresent(c, (k,v)-> v+1);
			}
			countChars.computeIfAbsent(c, k->1);
		}
		Set<Character> keys=countChars.keySet();
		StringBuilder sb=new StringBuilder();
		
		for(Character c: keys) {
			sb.append(c);
			sb.append(countChars.get(c));
		}
		return sb.toString();
	}
	
	public static String [] findMatchingWords(String [] words,char[] chars) {
		Arrays.sort(chars);
		String key=chars.toString();
		List<String> res=new ArrayList<>();
		for(String str: words) {
			char[] ch=str.toCharArray();
			Arrays.sort(ch);
			String newStr=ch.toString();
			if(newStr.equalsIgnoreCase(key))
				res.add(str);
		}
		return res.toArray(new String[res.size()]);
		
	}
	
}
